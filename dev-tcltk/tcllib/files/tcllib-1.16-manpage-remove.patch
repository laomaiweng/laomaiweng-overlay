diff --git a/modules/coroutine/coroutine.man b/modules/coroutine/coroutine.man
deleted file mode 100644
index 29b061f..0000000
--- a/modules/coroutine/coroutine.man
+++ /dev/null
@@ -1,119 +0,0 @@
-[comment {-*- tcl -*- doctools manpage}]
-[manpage_begin coroutine n 1]
-[copyright {2010-2011 Andreas Kupries <andreas_kupries@users.sourceforge.net>}]
-[moddesc   {Coroutine utilities}]
-[category  Coroutine]
-[titledesc {Coroutine based event and IO handling}]
-[require Tcl 8.6]
-[require coroutine 1.1]
-[description]
-[keywords coroutine channel events threads {green threads}]
-[keywords global exit after vwait update gets read]
-
-The [package coroutine] package provides coroutine-aware
-implementations of various event- and channel related commands. It can
-be in multiple modes:
-
-[list_begin enumerated]
-
-[enum] Call the commands through their ensemble, in code which is
-explicitly written for use within coroutines.
-
-[enum] Import the commands into a namespace, either directly, or
-through [cmd {namespace path}]. This allows the use from within code
-which is not coroutine-aware per se and restricted to specific
-namespaces.
-
-[list_end]
-
-A more agressive form of making code coroutine-oblivious than point 2
-above is available through the package [package coroutine::auto],
-which intercepts the relevant builtin commands and changes their
-implementation dependending on the context they are run in, i.e.
-inside or outside of a coroutine.
-
-
-[section API]
-
-All the commands listed below are synchronous with respect to the
-coroutine invoking them, i.e. this coroutine blocks until the result
-is available. The overall eventloop is not blocked however.
-
-
-[list_begin definitions]
-
-[call [cmd {coroutine::util after}] [arg delay]]
-
-This command delays the coroutine invoking it by [arg delay]
-milliseconds.
-
-
-[call [cmd {coroutine::util await}] [arg varname]...]
-
-This command is an extension form of the [cmd {coroutine::util vwait}]
-command (see below) which waits on a write to one of many named
-namespace variables.
-
-
-[call [cmd {coroutine::util create}] [arg arg]...]
-
-This command creates a new coroutine with an automatically assigned
-name and causes it to run the code specified by the arguments.
-
-
-[call [cmd {coroutine::util exit}] [opt [arg status]]]
-
-This command exits the current coroutine, causing it to return
-[arg status]. If no status was specified the default [arg 0] is
-returned.
-
-
-[call [cmd {coroutine::util gets}] [arg chan] [opt [arg varname]]]
-
-This command reads a line from the channel [arg chan] and returns it
-either as its result, or, if a [arg varname] was specified, writes it
-to the named variable and returns the number of characters read.
-
-
-[call [cmd {coroutine::util global}] [arg varname]...]
-
-This command imports the named global variables of the coroutine into
-the current scope. From the technical point of view these variables
-reside in level [const #1] of the Tcl stack. I.e. these are not the
-regular global variable in to the global namespace, and each coroutine
-can have their own set, independent of all others.
-
-
-[call [cmd {coroutine::util read}] [option -nonewline] [arg chan] [opt [arg n]]]
-
-This command reads [arg n] characters from the channel [arg chan] and
-returns them as its result. If [arg n] is not specified the command
-will read the channel until EOF is reached.
-
-
-[call [cmd {coroutine::util update}] [opt [const idletasks]]]
-
-This command causes the coroutine invoking it to run pending events or
-idle handlers before proceeding.
-
-
-[call [cmd {coroutine::util vwait}] [arg varname]]
-
-This command causes the coroutine calling it to wait for a write to
-the named namespace variable [arg varname].
-
-[list_end]
-
-
-[section {BUGS, IDEAS, FEEDBACK}]
-
-This document, and the package it describes, will undoubtedly contain
-bugs and other problems.
-
-Please report such in the category [emph coroutine] of the
-[uri {http://sourceforge.net/tracker/?group_id=12883} {Tcllib SF Trackers}].
-
-Please also report any ideas for enhancements you may have for either
-package and/or documentation.
-
-[manpage_end]
diff --git a/modules/virtchannel_base/string.man b/modules/virtchannel_base/string.man
deleted file mode 100644
index 20d9368..0000000
--- a/modules/virtchannel_base/string.man
+++ /dev/null
@@ -1,53 +0,0 @@
-[comment {-*- tcl -*- doctools manpage}]
-[manpage_begin tcl::chan::string n 1]
-[copyright {2009 Andreas Kupries <andreas_kupries@users.sourceforge.net>}]
-[moddesc   {Reflected/virtual channel support}]
-[category  Channels]
-[titledesc {Read-only in-memory channel}]
-[require Tcl 8.5]
-[require TclOO]
-[require tcl::chan::events [opt 1]]
-[require tcl::chan::string [opt 1]]
-[description]
-[para]
-
-The [package tcl::chan::string] package provides a command creating
-channels which live purely in memory. They provide random-access,
-i.e. are seekable.
-
-In contrast to the channels created by [package tcl::chan::memchan]
-they are read-only however, their content is provided at the time of
-construction and immutable afterward.
-
-[para] Packages related to this are [package tcl::chan::memchan] and
-[package tcl::chan::variable].
-
-[para] The internal [package TclOO] class implementing the channel
-handler is a sub-class of the [package tcl::chan::events] framework.
-
-[section API]
-
-[list_begin definitions]
-
-[call [cmd ::tcl::chan::string] [arg content]]
-
-This command creates a new string channel and returns its handle. The
-channel provides random read-only access to the [arg content] string.
-
-[list_end]
-
-
-[section {BUGS, IDEAS, FEEDBACK}]
-
-This document, and the package it describes, will undoubtedly contain
-bugs and other problems.
-
-Please report such in the category [emph virtchannel] of the
-[uri {http://sourceforge.net/tracker/?group_id=12883} {Tcllib SF Trackers}].
-
-Please also report any ideas for enhancements you may have for either
-package and/or documentation.
-
-
-[keywords {virtual channel} {reflected channel} {in-memory channel} {tip 219}]
-[manpage_end]
diff --git a/modules/virtchannel_base/variable.man b/modules/virtchannel_base/variable.man
deleted file mode 100644
index e1af025..0000000
--- a/modules/virtchannel_base/variable.man
+++ /dev/null
@@ -1,54 +0,0 @@
-[comment {-*- tcl -*- doctools manpage}]
-[manpage_begin tcl::chan::variable n 1]
-[copyright {2009 Andreas Kupries <andreas_kupries@users.sourceforge.net>}]
-[moddesc   {Reflected/virtual channel support}]
-[category  Channels]
-[titledesc {In-memory channel using variable for storage}]
-[require Tcl 8.5]
-[require TclOO]
-[require tcl::chan::events [opt 1]]
-[require tcl::chan::variable [opt 1]]
-[description]
-[para]
-
-The [package tcl::chan::variable] package provides a command creating
-channels which live purely in memory. They provide random-access,
-i.e. are seekable.
-
-In contrast to the channels created by [package tcl::chan::memchan]
-the data is not hidden in the channel however, but stored in an
-associated variable, specified at the time of construction.
-
-[para] Packages related to this are [package tcl::chan::memchan] and
-[package tcl::chan::string].
-
-[para] The internal [package TclOO] class implementing the channel
-handler is a sub-class of the [package tcl::chan::events] framework.
-
-[section API]
-
-[list_begin definitions]
-
-[call [cmd ::tcl::chan::variable] [arg varname]]
-
-This command creates a new variable channel and returns its handle.
-The content of the channel is stored in the associated namespace
-variable [arg varname].
-
-[list_end]
-
-
-[section {BUGS, IDEAS, FEEDBACK}]
-
-This document, and the package it describes, will undoubtedly contain
-bugs and other problems.
-
-Please report such in the category [emph virtchannel] of the
-[uri {http://sourceforge.net/tracker/?group_id=12883} {Tcllib SF Trackers}].
-
-Please also report any ideas for enhancements you may have for either
-package and/or documentation.
-
-
-[keywords {virtual channel} {reflected channel} {in-memory channel} {tip 219}]
-[manpage_end]
diff --git a/modules/virtchannel_transform/zlib.man b/modules/virtchannel_transform/zlib.man
deleted file mode 100644
index be593c0..0000000
--- a/modules/virtchannel_transform/zlib.man
+++ /dev/null
@@ -1,50 +0,0 @@
-[comment {-*- tcl -*- doctools manpage}]
-[manpage_begin tcl::transform::zlib n 1]
-[copyright {2009 Andreas Kupries <andreas_kupries@users.sourceforge.net>}]
-[moddesc   {Reflected/virtual channel support}]
-[category  Channels]
-[titledesc {zlib (de)compression}]
-[require Tcl 8.6]
-[require tcl::transform::core [opt 1]]
-[require tcl::transform::zlib [opt 1]]
-[description]
-[para]
-
-The [package tcl::transform::zlib] package provides a command creating
-a channel transformation which zlib compresses the written data, and
-decompresses on reading.
-
-[para] The internal [package TclOO] class implementing the transform
-handler is a sub-class of the [package tcl::transform::core]
-framework.
-
-[section API]
-
-[list_begin definitions]
-
-[call [cmd ::tcl::transform::zlib] [arg chan] [opt [arg level]]]
-
-This command creates a zlib compressor transformation on top of the
-channel [arg chan] and returns its handle.
-
-[para] The [arg level] specifies how much effort is put into the
-compression, from [const 0] to [const 9], and defaults to [const 4].
-
-[list_end]
-
-
-[section {BUGS, IDEAS, FEEDBACK}]
-
-This document, and the package it describes, will undoubtedly contain
-bugs and other problems.
-
-Please report such in the category [emph virtchannel] of the
-[uri {http://sourceforge.net/tracker/?group_id=12883} {Tcllib SF Trackers}].
-
-Please also report any ideas for enhancements you may have for either
-package and/or documentation.
-
-
-[keywords compression decompression transformation {channel transformation}]
-[keywords zlib {tip 234} {virtual channel} {reflected channel} {tip 230}]
-[manpage_end]

