diff --git a/SWIG/_engine.i b/SWIG/_engine.i
index 4ba93f3..835424f 100644
--- a/SWIG/_engine.i
+++ b/SWIG/_engine.i
@@ -23,15 +23,6 @@
 %rename(engine_load_builtin_engines) ENGINE_load_builtin_engines;
 extern void ENGINE_load_builtin_engines(void);
 
-%rename(engine_load_dynamic) ENGINE_load_dynamic;
-extern void ENGINE_load_dynamic(void);
-
-%rename(engine_load_openssl) ENGINE_load_openssl;
-extern void ENGINE_load_openssl(void);
-
-%rename(engine_cleanup) ENGINE_cleanup;
-extern void ENGINE_cleanup(void);
-
 /*
  * Engine allocation functions
  */
@@ -111,6 +102,28 @@ extern void UI_destroy_method(UI_METHOD *ui_method);
  * optional password set.
  */
 
+void engine_load_dynamic(void) {
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_DYNAMIC, NULL);
+#else
+    ENGINE_load_dynamic();
+#endif
+}
+
+void engine_load_openssl(void) {
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_OPENSSL, NULL);
+#else
+    ENGINE_load_openssl();
+#endif
+}
+
+void engine_cleanup(void) {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+    ENGINE_cleanup();
+#endif
+}
+
 typedef struct {
     char * password;
     char * prompt;
diff --git a/SWIG/_m2crypto.i b/SWIG/_m2crypto.i
index 73f07b8..24a7882 100644
--- a/SWIG/_m2crypto.i
+++ b/SWIG/_m2crypto.i
@@ -26,6 +26,7 @@
 #pragma GCC diagnostic warning "-Wstrict-prototypes"
 #endif
 
+#include <openssl/dsa.h>
 #include <openssl/err.h>
 #include <openssl/rand.h>
 #include <_lib.h>
diff --git a/SWIG/_rand.i b/SWIG/_rand.i
index 20e8d6e..7a0cdf3 100644
--- a/SWIG/_rand.i
+++ b/SWIG/_rand.i
@@ -16,13 +16,17 @@ extern int RAND_write_file(const char *);
 extern int RAND_poll(void);
 %rename(rand_status) RAND_status;
 extern int RAND_status(void);
-%rename(rand_cleanup) RAND_cleanup;
-extern void RAND_cleanup(void);
 
 %warnfilter(454) _rand_err;
 %inline %{
 static PyObject *_rand_err;
 
+void rand_cleanup(void) {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+    RAND_cleanup();
+#endif
+}
+
 void rand_init(PyObject *rand_err) {
     Py_INCREF(rand_err);
     _rand_err = rand_err;
@@ -86,7 +90,11 @@ PyObject *rand_pseudo_bytes(int n) {
         PyMem_Free(blob);
         return NULL;
     }
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    ret = RAND_bytes(blob, n);
+#else
     ret = RAND_pseudo_bytes(blob, n);
+#endif
     if (ret == -1) {
         PyMem_Free(blob);
         Py_DECREF(tuple);
diff --git a/SWIG/_ssl.i b/SWIG/_ssl.i
index 210462f..8bed573 100644
--- a/SWIG/_ssl.i
+++ b/SWIG/_ssl.i
@@ -19,6 +19,7 @@ typedef unsigned __int64 uint64_t;
 #include <pythread.h>
 #include <limits.h>
 #include <openssl/bio.h>
+#include <openssl/crypto.h>
 #include <openssl/dh.h>
 #include <openssl/ssl.h>
 #include <openssl/tls1.h>
@@ -258,8 +259,12 @@ static PyObject *_ssl_err;
 static PyObject *_ssl_timeout_err;
 
 void ssl_init(PyObject *ssl_err, PyObject *ssl_timeout_err) {
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    OPENSSL_init_ssl(OPENSSL_INIT_LOAD_SSL_STRINGS | OPENSSL_INIT_LOAD_CRYPTO_STRINGS, NULL);
+#else
     SSL_library_init();
     SSL_load_error_strings();
+#endif
     Py_INCREF(ssl_err);
     Py_INCREF(ssl_timeout_err);
     _ssl_err = ssl_err;
@@ -271,8 +276,10 @@ const SSL_METHOD *sslv3_method(void) {
 #if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
     PyErr_WarnEx(PyExc_DeprecationWarning,
                  "Function SSLv3_method has been deprecated.", 1);
-#endif
+    return TLS_method();
+#else
     return SSLv3_method();
+#endif
 }
 #endif
 
@@ -280,8 +287,10 @@ const SSL_METHOD *tlsv1_method(void) {
 #if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
     PyErr_WarnEx(PyExc_DeprecationWarning,
                  "Function TLSv1_method has been deprecated.", 1);
-#endif
+    return TLS_method();
+#else
     return TLSv1_method();
+#endif
 }
 
 void ssl_ctx_passphrase_callback(SSL_CTX *ctx, PyObject *pyfunc) {
@@ -407,14 +416,23 @@ void ssl_ctx_set_tmp_dh_callback(SSL_CTX *ctx,  PyObject *pyfunc) {
 }
 
 long ssl_ctx_set_tmp_rsa(SSL_CTX *ctx, RSA* rsa) {
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    return 1;
+#else
     return SSL_CTX_set_tmp_rsa(ctx, rsa);
+#endif
 }
 
 void ssl_ctx_set_tmp_rsa_callback(SSL_CTX *ctx,  PyObject *pyfunc) {
     Py_XDECREF(ssl_set_tmp_rsa_cb_func);
     Py_INCREF(pyfunc);
     ssl_set_tmp_rsa_cb_func = pyfunc;
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    (void)ctx;
+    (void)ssl_set_tmp_rsa_cb_func;
+#else
     SSL_CTX_set_tmp_rsa_callback(ctx, ssl_set_tmp_rsa_callback);
+#endif
 }
 
 int ssl_ctx_load_verify_locations(SSL_CTX *ctx, const char *cafile, const char *capath) {
diff --git a/SWIG/_util.i b/SWIG/_util.i
index 34d7dd2..21cd9e1 100644
--- a/SWIG/_util.i
+++ b/SWIG/_util.i
@@ -11,6 +11,11 @@
 %inline %{
 static PyObject *_util_err;
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#define OPENSSL_buf2hexstr hex_to_string
+#define OPENSSL_hexstr2buf string_to_hex
+#endif
+
 void util_init(PyObject *util_err) {
     Py_INCREF(util_err);
     _util_err = util_err;
@@ -25,7 +30,7 @@ PyObject *util_hex_to_string(PyObject *blob) {
     if (PyObject_AsReadBuffer(blob, &buf, &len) == -1)
         return NULL;
 
-    ret = hex_to_string((unsigned char *)buf, len);
+    ret = OPENSSL_buf2hexstr((unsigned char *)buf, len);
     if (!ret) {
         m2_PyErr_Msg(_util_err);
         return NULL;
@@ -52,7 +57,7 @@ PyObject *util_string_to_hex(PyObject *blob) {
         return NULL;
 
     len = len0;
-    ret = string_to_hex((char *)buf, &len);
+    ret = OPENSSL_hexstr2buf((char *)buf, &len);
     if (ret == NULL) {
         m2_PyErr_Msg(_util_err);
         return NULL;
diff --git a/SWIG/_x509.i b/SWIG/_x509.i
index 70b3339..e137ac8 100644
--- a/SWIG/_x509.i
+++ b/SWIG/_x509.i
@@ -38,6 +38,13 @@ IMPLEMENT_ASN1_FUNCTIONS(SEQ_CERT)
 extern int X509_check_ca(X509 *);
 #endif
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#define X509_getm_notBefore X509_get_notBefore
+#define X509_getm_notAfter X509_get_notAfter
+#define X509_set1_notBefore X509_set_notBefore
+#define X509_set1_notAfter X509_set_notAfter
+#endif
+
 %rename(x509_new) X509_new;
 extern X509 *X509_new( void );
 %rename(x509_dup) X509_dup;
@@ -425,22 +432,22 @@ long x509_get_version(X509 *x) {
 
 /* X509_set_notBefore() is a macro. */
 int x509_set_not_before(X509 *x, ASN1_TIME *tm) {
-    return X509_set_notBefore(x, tm);
+    return X509_set1_notBefore(x, tm);
 }
 
 /* X509_get_notBefore() is a macro. */
 ASN1_TIME *x509_get_not_before(X509 *x) {
-    return X509_get_notBefore(x);
+    return X509_getm_notBefore(x);
 }
 
 /* X509_set_notAfter() is a macro. */
 int x509_set_not_after(X509 *x, ASN1_TIME *tm) {
-    return X509_set_notAfter(x, tm);
+    return X509_set1_notAfter(x, tm);
 }
 
 /* X509_get_notAfter() is a macro. */
 ASN1_TIME *x509_get_not_after(X509 *x) {
-    return X509_get_notAfter(x);
+    return X509_getm_notAfter(x);
 }
 
 int x509_sign(X509 *x, EVP_PKEY *pkey, EVP_MD *md) {
